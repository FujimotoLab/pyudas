{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a3fb5a9e",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "attempted relative import with no known parent package",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Input \u001b[1;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 5>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpyspedas\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutilities\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtime_double\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m time_double\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpytplot\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m get_data, store_data, options, clip, ylim, cdf_to_tplot\n\u001b[1;32m----> 5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mload\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m load\n\u001b[0;32m      7\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mgps_atec\u001b[39m(\n\u001b[0;32m      8\u001b[0m     trange\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2020-01-01\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2020-01-02\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[0;32m      9\u001b[0m     site\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mall\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     26\u001b[0m \n\u001b[0;32m     27\u001b[0m     \u001b[38;5;66;03m#===== Set parameters (1) =====#\u001b[39;00m\n\u001b[0;32m     28\u001b[0m     file_format \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnetcdf\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "\u001b[1;31mImportError\u001b[0m: attempted relative import with no known parent package"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "from pyspedas.utilities.time_double import time_double\n",
    "from pytplot import get_data, store_data, options, clip, ylim, cdf_to_tplot\n",
    "from ..load import load\n",
    "\n",
    "def gps_atec(\n",
    "    trange=['2020-01-01', '2020-01-02'],\n",
    "    site='all',\n",
    "    datatype='all',\n",
    "\tparameter='',\n",
    "    fproton=False,\n",
    "    no_update=False,\n",
    "    downloadonly=False,\n",
    "    uname=None,\n",
    "    passwd=None,\n",
    "\tsuffix='',\n",
    "    get_support_data=False,\n",
    "    varformat=None,\n",
    "    varnames=[],\n",
    "    notplot=False,\n",
    "    time_clip=False,\n",
    "    version=None,\n",
    "    ror=True\n",
    "):\n",
    "\n",
    "    #===== Set parameters (1) =====#\n",
    "    file_format = 'netcdf'\n",
    "    remote_data_dir = 'https://stdb2.isee.nagoya-u.ac.jp/GPS/shinbori/AGRID2/nc/'\n",
    "    local_path = 'isee/'\n",
    "    prefix = 'isee_'\n",
    "    file_res = 3600. * 24\n",
    "    site_list = []\n",
    "    datatype_list = ['1sec', '2sec', '02hz']\n",
    "    parameter_list = ['']\n",
    "    #==============================#\n",
    "\n",
    "    # Check input parameters\n",
    "    # site\n",
    "    if isinstance(site, str):\n",
    "        st_list = site.lower()\n",
    "        st_list = st_list.split(' ')\n",
    "    elif isinstance(site, list):\n",
    "        st_list = []\n",
    "        for i in range(len(site)):\n",
    "            st_list.append(site[i].lower())\n",
    "    if 'all' in st_list:\n",
    "        st_list = site_list\n",
    "    st_list = list(set(st_list).intersection(site_list))\n",
    "\n",
    "    # datatype\n",
    "    if isinstance(datatype, str):\n",
    "        dt_list = datatype.lower()\n",
    "        dt_list = dt_list.split(' ')\n",
    "    elif isinstance(datatype, list):\n",
    "        dt_list = []\n",
    "        for i in range(len(datatype)):\n",
    "            dt_list.append(datatype[i].lower())\n",
    "    if 'all' in dt_list:\n",
    "        dt_list = datatype_list\n",
    "    dt_list = list(set(dt_list).intersection(datatype_list))\n",
    "\n",
    "    # parameter\n",
    "    if isinstance(parameter, str):\n",
    "        pr_list = parameter.lower()\n",
    "        pr_list = pr_list.split(' ')\n",
    "    elif isinstance(parameter, list):\n",
    "        pr_list = []\n",
    "        for i in range(len(parameter)):\n",
    "            pr_list.append(parameter[i].lower())\n",
    "    if 'all' in pr_list:\n",
    "        pr_list = parameter_list\n",
    "    pr_list = list(set(pr_list).intersection(parameter_list))\n",
    "    \n",
    "    if notplot:\n",
    "        loaded_data = {}\n",
    "    else:\n",
    "        loaded_data = []\n",
    "\n",
    "    for st in st_list:\n",
    "        print(st)\t\t\n",
    "        if len(st) < 1:\n",
    "            varname_st = ''\n",
    "        else:\n",
    "            varname_st = st\n",
    "\n",
    "        for dt in dt_list:\n",
    "            print(dt)\n",
    "            if len(dt) < 1:\n",
    "                varname_st_dt = varname_st\n",
    "            else:\n",
    "                varname_st_dt = varname_st+'_'+dt\n",
    "                \n",
    "            for pr in pr_list:\n",
    "                print(pr)\n",
    "                if len(pr) < 1:\n",
    "                    varname_st_dt_pr = varname_st_dt\n",
    "                else:\n",
    "                    varname_st_dt_pr = varname_st_dt+'_'+pr\n",
    "\t\t\t\t\n",
    "                if len(varname_st_dt_pr) > 0:\n",
    "                    suffix = '_'+varname_st_dt_pr\n",
    "\n",
    "\t\t\t\t#===== Set parameters (2) =====#\n",
    "                pathformat = 'fmag/'+st+'/'+dt+'/%Y/nipr_'+dt+'_fmag_'+st+'_%Y%m%d_v??.cdf'\n",
    "\t\t\t\t#==============================#\n",
    "\t\t\t\n",
    "                suffix_tmp=''\t\t\t\n",
    "                loaded_data_temp = load(trange=trange, site=st, datatype=dt, parameter=pr, \\\n",
    "                    pathformat=pathformat, file_res=file_res, remote_path = remote_data_dir, \\\n",
    "                    no_update=no_update, downloadonly=downloadonly, uname=uname, passwd=passwd, \\\n",
    "                    local_path=local_path, prefix=prefix, suffix=suffix_tmp, \\\n",
    "                    get_support_data=get_support_data, varformat=varformat, varnames=varnames, \\\n",
    "                    notplot=notplot, time_clip=time_clip, version=version)\n",
    "            \n",
    "                if notplot:\n",
    "                    loaded_data.update(loaded_data_temp)\n",
    "                else:\n",
    "                    loaded_data += loaded_data_temp\n",
    "\t\t\t\t\t\n",
    "                if (len(loaded_data_temp) > 0) and ror:\n",
    "                    try:\n",
    "                        if isinstance(loaded_data_temp, list):\n",
    "                            if downloadonly:\n",
    "                                cdf_file = cdflib.CDF(loaded_data_temp[-1])\n",
    "                                gatt = cdf_file.globalattsget()\n",
    "                            else:\n",
    "                                gatt = get_data(loaded_data_temp[-1], metadata=True)['CDF']['GATT']\n",
    "                        elif isinstance(loaded_data_temp, dict):\n",
    "                            gatt = loaded_data_temp[list(loaded_data_temp.keys())[-1]]['CDF']['GATT']\n",
    "                        print('**************************************************************************')\n",
    "                        print(gatt[\"Logical_source_description\"])\n",
    "                        print('')\n",
    "                        print(f'Information about {gatt[\"Station_code\"]}')\n",
    "                        print(f'PI :{gatt[\"PI_name\"]}')\n",
    "                        print('')\n",
    "                        print(f'Affiliations: {gatt[\"PI_affiliation\"]}')\n",
    "                        print('')\n",
    "                        print('Rules of the Road for NIPR Fluxgate Magnetometer Data:')\n",
    "                        print('')\n",
    "                        print(gatt[\"TEXT\"])\n",
    "                        print(f'{gatt[\"LINK_TEXT\"]} {gatt[\"HTTP_LINK\"]}')\n",
    "                        print('**************************************************************************')\n",
    "                    except:\n",
    "                        print('printing PI info and rules of the road was failed')\n",
    "                \n",
    "                if (not downloadonly) and (not notplot):\n",
    "                    #===== Remove or Rename tplot variables, and set options =====#\n",
    "                    current_tplot_name = prefix+'epoch_'+dt\n",
    "                    if current_tplot_name in loaded_data:\n",
    "                        store_data(current_tplot_name, delete=True)\n",
    "                        loaded_data.remove(current_tplot_name)\n",
    "\n",
    "                    current_tplot_name = prefix+'time_cal_'+dt\n",
    "                    if current_tplot_name in loaded_data:\n",
    "                        store_data(current_tplot_name, delete=True)\n",
    "                        loaded_data.remove(current_tplot_name)\n",
    "\n",
    "                    current_tplot_name = prefix+'hdz_'+dt\n",
    "                    if current_tplot_name in loaded_data:\n",
    "                        get_data_vars = get_data(current_tplot_name)\n",
    "                        if get_data_vars is None:\n",
    "                            store_data(current_tplot_name, delete=True)\n",
    "                        else:\n",
    "                            #;--- Rename\n",
    "                            new_tplot_name = prefix+'mag'+suffix\n",
    "                            store_data(current_tplot_name, newname=new_tplot_name)\n",
    "                            loaded_data.remove(current_tplot_name)\n",
    "                            loaded_data.append(new_tplot_name)\n",
    "                            #;--- Missing data -1.e+31 --> NaN\n",
    "                            clip(new_tplot_name, -1e+5, 1e+5)\n",
    "                            get_data_vars = get_data(new_tplot_name)\n",
    "                            ylim(new_tplot_name, np.nanmin(get_data_vars[1]), np.nanmax(get_data_vars[1]))\n",
    "                            #;--- Labels\n",
    "                            options(new_tplot_name, 'legend_names', ['H','D','Z'])\n",
    "                            options(new_tplot_name, 'Color', ['b', 'g', 'r'])\n",
    "                            options(new_tplot_name, 'ytitle', st.upper())\n",
    "                            options(new_tplot_name, 'ysubtitle', '[nT]')\n",
    "\n",
    "                    #;----- If fproton=True is set, rename tplot variables -----;\n",
    "                    if fproton:\n",
    "                        current_tplot_name = prefix+'f_'+dt\n",
    "                        if current_tplot_name in loaded_data:\n",
    "                            get_data_vars = get_data(current_tplot_name)\n",
    "                            if get_data_vars is None:\n",
    "                                store_data(current_tplot_name, delete=True)\n",
    "                            else:\n",
    "                                #;--- Rename\n",
    "                                new_tplot_name = prefix+'mag_'+suffix+'_f'\n",
    "                                store_data(current_tplot_name, newname=new_tplot_name)\n",
    "                                loaded_data.remove(current_tplot_name)\n",
    "                                loaded_data.append(new_tplot_name)\n",
    "                                #;--- Missing data -1.e+31 --> NaN\n",
    "                                clip(new_tplot_name, -1e+5, 1e+5)\n",
    "                                get_data_vars = get_data(new_tplot_name)\n",
    "                                if np.all(np.isnan(get_data_vars[1])):\n",
    "                                    ylim(new_tplot_name, 40000, 49000)\n",
    "                                else:\n",
    "                                    ylim(new_tplot_name, np.nanmin(get_data_vars[1]), np.nanmax(get_data_vars[1]))\n",
    "                                #;--- Labels\n",
    "                                options(new_tplot_name, 'legend_names', ['F'])\n",
    "                                options(new_tplot_name, 'ytitle', st.upper())\n",
    "                                options(new_tplot_name, 'ysubtitle', '[nT]')\n",
    "                    else:\n",
    "                        current_tplot_name = prefix+'f_'+dt\n",
    "                        if current_tplot_name in loaded_data:\n",
    "                            store_data(current_tplot_name, delete=True)\n",
    "                            loaded_data.remove(current_tplot_name)\n",
    "\n",
    "    return loaded_data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0614264d",
   "metadata": {},
   "outputs": [],
   "source": [
    "gmag_nipr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b45bb964",
   "metadata": {},
   "outputs": [],
   "source": [
    "from iugonet import gmag_nipr\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3f0b50f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "07-Dec-22 17:55:58: Downloading remote index: http://iugonet0.nipr.ac.jp/data/fmag/syo/2sec/2017/\n",
      "07-Dec-22 17:55:58: Remote index not found: http://iugonet0.nipr.ac.jp/data/fmag/syo/2sec/2017/\n",
      "07-Dec-22 17:55:58: Downloading remote index: http://iugonet0.nipr.ac.jp/data/fmag/syo/02hz/2017/\n",
      "07-Dec-22 17:55:58: Remote index not found: http://iugonet0.nipr.ac.jp/data/fmag/syo/02hz/2017/\n",
      "07-Dec-22 17:55:58: Downloading remote index: http://iugonet0.nipr.ac.jp/data/fmag/syo/1sec/2017/\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "syo\n",
      "2sec\n",
      "\n",
      "02hz\n",
      "\n",
      "1sec\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "07-Dec-22 17:55:58: Downloading http://iugonet0.nipr.ac.jp/data/fmag/syo/1sec/2017/nipr_1sec_fmag_syo_20170907_v02.cdf to iugonet_data/nipr/fmag/syo/1sec/2017/nipr_1sec_fmag_syo_20170907_v02.cdf\n",
      "07-Dec-22 17:55:58: Download complete: iugonet_data/nipr/fmag/syo/1sec/2017/nipr_1sec_fmag_syo_20170907_v02.cdf\n",
      "07-Dec-22 17:55:58: C:\\Users\\irera\\anaconda3\\lib\\site-packages\\erfa\\core.py:154: ErfaWarning: ERFA function \"dtf2d\" yielded 1 of \"dubious year (Note 6)\"\n",
      "  warnings.warn('ERFA function \"{}\" yielded {}'.format(func_name, wmsg),\n",
      "\n",
      "07-Dec-22 17:55:58: C:\\Users\\irera\\anaconda3\\lib\\site-packages\\pytplot\\importers\\cdf_to_tplot.py:252: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  if ydata[ydata == var_atts[\"FILLVAL\"]].size != 0:\n",
      "\n",
      "Exception ignored in: <function CDF.__del__ at 0x000002EE64D5C3A0>\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\irera\\anaconda3\\lib\\site-packages\\cdflib\\cdfread.py\", line 182, in __del__\n",
      "    os.remove(self.temp_file)\n",
      "PermissionError: [WinError 32] プロセスはファイルにアクセスできません。別のプロセスが使用中です。: 'C:\\\\Users\\\\irera\\\\AppData\\\\Local\\\\Temp\\\\tmpwuq5pe9x.cdf'\n",
      "07-Dec-22 17:55:59: C:\\Users\\irera\\pyudas\\iugonet\\load.py:61: ResourceWarning: unclosed file <_io.BufferedReader name='C:\\\\Users\\\\irera\\\\AppData\\\\Local\\\\Temp\\\\tmpwuq5pe9x.cdf'>\n",
      "  tvars = cdf_to_tplot(out_files, prefix=prefix, suffix=suffix, get_support_data = \\\n",
      "\n",
      "07-Dec-22 17:55:59: C:\\Users\\irera\\anaconda3\\lib\\site-packages\\xarray\\core\\pycompat.py:22: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  duck_array_version = LooseVersion(duck_array_module.__version__)\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**************************************************************************\n",
      "NIPR 1sec Resolution Fluxgate Magnetometer Data\n",
      "\n",
      "Information about SYO\n",
      "PI :Akira Kadokura\n",
      "\n",
      "Affiliations: National Institute of Polar Research, 10-3, Midoricho, Tachikawa, Tokyo 190-8518, Japan\n",
      "\n",
      "Rules of the Road for NIPR Fluxgate Magnetometer Data:\n",
      "\n",
      "Please contact the Principal Investigator of this project (uapdata [at] nipr.ac.jp) before using the data at any publications and/or presentations. We welcome collaborative research and strongly recommend users to contact us early in order to ensure that the data are suitable for their research. When the data are used at any publications and/or presentations, we would like to ask the users to acknowledge NIPR and send us the PDF files of the publications and/or presentations. An example of the acknowledgement statement is as follows: 'Magnetic field data were provided by National Institute of Polar Research, Japan. The Upper Atmosphere Physics Monitoring Observation at Syowa Station was mainly supported by the Research Program of Japanese Antarctic Research Expedition (JARE) of the Ministry of Education, Culture, Sports, Science, and Technology of Japan (MEXT). The distribution of the magnetic field data has been partly supported by the IUGONET (Inter-university Upper atmosphere Global Observation NETwork) project (http://www.iugonet.org/) funded by the MEXT.' For more details about the observations, please refer the following data report: JARE data reports. Upper atmosphere physics 26, 1-59, 2008-02.\n",
      "For more information, see http://scidbase.nipr.ac.jp/modules/metadata/index.php?content_id=102\n",
      "**************************************************************************\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['nipr_mag_syo_1sec']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gmag_nipr(trange=['2017-09-07', '2017-09-08'], site='syo')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "15e40e50",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'tplot' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [4]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mtplot\u001b[49m([\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnipr_mag_syo_1sec\u001b[39m\u001b[38;5;124m'\u001b[39m])\n",
      "\u001b[1;31mNameError\u001b[0m: name 'tplot' is not defined"
     ]
    }
   ],
   "source": [
    "tplot(['nipr_mag_syo_1sec'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c23fa261",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pytplot' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [5]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mpytplot\u001b[49m\u001b[38;5;241m.\u001b[39mtplot_names()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'pytplot' is not defined"
     ]
    }
   ],
   "source": [
    "pytplot.tplot_names()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6433a887",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspedas.utilities.time_double import time_double"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6f9d1fa4",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pytplot' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [7]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mpytplot\u001b[49m\u001b[38;5;241m.\u001b[39mtplot_names()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'pytplot' is not defined"
     ]
    }
   ],
   "source": [
    "pytplot.tplot_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bec7c85e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyspedas\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ec393600",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pytplot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1e8359e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 : nipr_mag_syo_1sec\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['nipr_mag_syo_1sec']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pytplot.tplot_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "69c25af0",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'nipr_mag_syo_1sec' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [17]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m tplot,([\u001b[43mnipr_mag_syo_1sec\u001b[49m])\n",
      "\u001b[1;31mNameError\u001b[0m: name 'nipr_mag_syo_1sec' is not defined"
     ]
    }
   ],
   "source": [
    "tplot,([nipr_mag_syo_1sec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f3417d0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pytplot.MPLPlotter.tplot import tplot\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "364a8b95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tplot(['nipr_mag_syo_1sec'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c15070bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "07-Dec-22 18:42:23: C:\\Users\\irera\\AppData\\Local\\Temp\\ipykernel_8520\\1722313543.py:5: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\n",
      "  from ..load import load\n",
      "\n"
     ]
    },
    {
     "ename": "ImportError",
     "evalue": "attempted relative import with no known parent package",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Input \u001b[1;32mIn [19]\u001b[0m, in \u001b[0;36m<cell line: 5>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpyspedas\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutilities\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtime_double\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m time_double\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpytplot\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m get_data, store_data, options, clip, ylim, cdf_to_tplot\n\u001b[1;32m----> 5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mload\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m load\n\u001b[0;32m      7\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mgps_atec\u001b[39m(\n\u001b[0;32m      8\u001b[0m     trange\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2020-01-01\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2020-01-02\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[0;32m      9\u001b[0m     site\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mall\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     26\u001b[0m \n\u001b[0;32m     27\u001b[0m     \u001b[38;5;66;03m#===== Set parameters (1) =====#\u001b[39;00m\n\u001b[0;32m     28\u001b[0m     file_format \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnetcdf\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "\u001b[1;31mImportError\u001b[0m: attempted relative import with no known parent package"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "from pyspedas.utilities.time_double import time_double\n",
    "from pytplot import get_data, store_data, options, clip, ylim, cdf_to_tplot\n",
    "from ..load import load\n",
    "\n",
    "def gps_atec(\n",
    "    trange=['2020-01-01', '2020-01-02'],\n",
    "    site='all',\n",
    "    datatype='all',\n",
    "\tparameter='',\n",
    "    fproton=False,\n",
    "    no_update=False,\n",
    "    downloadonly=False,\n",
    "    uname=None,\n",
    "    passwd=None,\n",
    "\tsuffix='',\n",
    "    get_support_data=False,\n",
    "    varformat=None,\n",
    "    varnames=[],\n",
    "    notplot=False,\n",
    "    time_clip=False,\n",
    "    version=None,\n",
    "    ror=True\n",
    "):\n",
    "\n",
    "    #===== Set parameters (1) =====#\n",
    "    file_format = 'netcdf'\n",
    "    remote_data_dir = 'https://stdb2.isee.nagoya-u.ac.jp/GPS/shinbori/AGRID2/nc/'\n",
    "    local_path = 'isee/'\n",
    "    prefix = 'isee_'\n",
    "    file_res = 3600. * 24\n",
    "    site_list = []\n",
    "    datatype_list = ['1sec', '2sec', '02hz']\n",
    "    parameter_list = ['']\n",
    "    #==============================#\n",
    "\n",
    "    # Check input parameters\n",
    "    # site\n",
    "    if isinstance(site, str):\n",
    "        st_list = site.lower()\n",
    "        st_list = st_list.split(' ')\n",
    "    elif isinstance(site, list):\n",
    "        st_list = []\n",
    "        for i in range(len(site)):\n",
    "            st_list.append(site[i].lower())\n",
    "    if 'all' in st_list:\n",
    "        st_list = site_list\n",
    "    st_list = list(set(st_list).intersection(site_list))\n",
    "\n",
    "    # datatype\n",
    "    if isinstance(datatype, str):\n",
    "        dt_list = datatype.lower()\n",
    "        dt_list = dt_list.split(' ')\n",
    "    elif isinstance(datatype, list):\n",
    "        dt_list = []\n",
    "        for i in range(len(datatype)):\n",
    "            dt_list.append(datatype[i].lower())\n",
    "    if 'all' in dt_list:\n",
    "        dt_list = datatype_list\n",
    "    dt_list = list(set(dt_list).intersection(datatype_list))\n",
    "\n",
    "    # parameter\n",
    "    if isinstance(parameter, str):\n",
    "        pr_list = parameter.lower()\n",
    "        pr_list = pr_list.split(' ')\n",
    "    elif isinstance(parameter, list):\n",
    "        pr_list = []\n",
    "        for i in range(len(parameter)):\n",
    "            pr_list.append(parameter[i].lower())\n",
    "    if 'all' in pr_list:\n",
    "        pr_list = parameter_list\n",
    "    pr_list = list(set(pr_list).intersection(parameter_list))\n",
    "    \n",
    "    if notplot:\n",
    "        loaded_data = {}\n",
    "    else:\n",
    "        loaded_data = []\n",
    "\n",
    "    for st in st_list:\n",
    "        print(st)\t\t\n",
    "        if len(st) < 1:\n",
    "            varname_st = ''\n",
    "        else:\n",
    "            varname_st = st\n",
    "\n",
    "        for dt in dt_list:\n",
    "            print(dt)\n",
    "            if len(dt) < 1:\n",
    "                varname_st_dt = varname_st\n",
    "            else:\n",
    "                varname_st_dt = varname_st+'_'+dt\n",
    "                \n",
    "            for pr in pr_list:\n",
    "                print(pr)\n",
    "                if len(pr) < 1:\n",
    "                    varname_st_dt_pr = varname_st_dt\n",
    "                else:\n",
    "                    varname_st_dt_pr = varname_st_dt+'_'+pr\n",
    "\t\t\t\t\n",
    "                if len(varname_st_dt_pr) > 0:\n",
    "                    suffix = '_'+varname_st_dt_pr\n",
    "\n",
    "\t\t\t\t#===== Set parameters (2) =====#\n",
    "                pathformat = '%Y/%Y%m%d%h_atec.nc'\n",
    "\t\t\t\t#==============================#\n",
    "\t\t\t\n",
    "                suffix_tmp=''\t\t\t\n",
    "                loaded_data_temp = load(trange=trange, site=st, datatype=dt, parameter=pr, \\\n",
    "                    pathformat=pathformat, file_res=file_res, remote_path = remote_data_dir, \\\n",
    "                    no_update=no_update, downloadonly=downloadonly, uname=uname, passwd=passwd, \\\n",
    "                    local_path=local_path, prefix=prefix, suffix=suffix_tmp, \\\n",
    "                    get_support_data=get_support_data, varformat=varformat, varnames=varnames, \\\n",
    "                    notplot=notplot, time_clip=time_clip, version=version)\n",
    "            \n",
    "                if notplot:\n",
    "                    loaded_data.update(loaded_data_temp)\n",
    "                else:\n",
    "                    loaded_data += loaded_data_temp\n",
    "\t\t\t\t\t\n",
    "                if (len(loaded_data_temp) > 0) and ror:\n",
    "                    try:\n",
    "                        if isinstance(loaded_data_temp, list):\n",
    "                            if downloadonly:\n",
    "                                cdf_file = cdflib.CDF(loaded_data_temp[-1])\n",
    "                                gatt = cdf_file.globalattsget()\n",
    "                            else:\n",
    "                                gatt = get_data(loaded_data_temp[-1], metadata=True)['CDF']['GATT']\n",
    "                        elif isinstance(loaded_data_temp, dict):\n",
    "                            gatt = loaded_data_temp[list(loaded_data_temp.keys())[-1]]['CDF']['GATT']\n",
    "                        print('**************************************************************************')\n",
    "                        print(gatt[\"Logical_source_description\"])\n",
    "                        print('')\n",
    "                        print(f'Information about {gatt[\"Station_code\"]}')\n",
    "                        print(f'PI :{gatt[\"PI_name\"]}')\n",
    "                        print('')\n",
    "                        print(f'Affiliations: {gatt[\"PI_affiliation\"]}')\n",
    "                        print('')\n",
    "                        print('Rules of the Road for NIPR Fluxgate Magnetometer Data:')\n",
    "                        print('')\n",
    "                        print(gatt[\"TEXT\"])\n",
    "                        print(f'{gatt[\"LINK_TEXT\"]} {gatt[\"HTTP_LINK\"]}')\n",
    "                        print('**************************************************************************')\n",
    "                    except:\n",
    "                        print('printing PI info and rules of the road was failed')\n",
    "                \n",
    "                if (not downloadonly) and (not notplot):\n",
    "                    #===== Remove or Rename tplot variables, and set options =====#\n",
    "                    current_tplot_name = prefix+'epoch_'+dt\n",
    "                    if current_tplot_name in loaded_data:\n",
    "                        store_data(current_tplot_name, delete=True)\n",
    "                        loaded_data.remove(current_tplot_name)\n",
    "\n",
    "                    current_tplot_name = prefix+'time_cal_'+dt\n",
    "                    if current_tplot_name in loaded_data:\n",
    "                        store_data(current_tplot_name, delete=True)\n",
    "                        loaded_data.remove(current_tplot_name)\n",
    "\n",
    "                    current_tplot_name = prefix+'hdz_'+dt\n",
    "                    if current_tplot_name in loaded_data:\n",
    "                        get_data_vars = get_data(current_tplot_name)\n",
    "                        if get_data_vars is None:\n",
    "                            store_data(current_tplot_name, delete=True)\n",
    "                        else:\n",
    "                            #;--- Rename\n",
    "                            new_tplot_name = prefix+'mag'+suffix\n",
    "                            store_data(current_tplot_name, newname=new_tplot_name)\n",
    "                            loaded_data.remove(current_tplot_name)\n",
    "                            loaded_data.append(new_tplot_name)\n",
    "                            #;--- Missing data -1.e+31 --> NaN\n",
    "                            clip(new_tplot_name, -1e+5, 1e+5)\n",
    "                            get_data_vars = get_data(new_tplot_name)\n",
    "                            ylim(new_tplot_name, np.nanmin(get_data_vars[1]), np.nanmax(get_data_vars[1]))\n",
    "                            #;--- Labels\n",
    "                            options(new_tplot_name, 'legend_names', ['H','D','Z'])\n",
    "                            options(new_tplot_name, 'Color', ['b', 'g', 'r'])\n",
    "                            options(new_tplot_name, 'ytitle', st.upper())\n",
    "                            options(new_tplot_name, 'ysubtitle', '[nT]')\n",
    "\n",
    "                    #;----- If fproton=True is set, rename tplot variables -----;\n",
    "                    if fproton:\n",
    "                        current_tplot_name = prefix+'f_'+dt\n",
    "                        if current_tplot_name in loaded_data:\n",
    "                            get_data_vars = get_data(current_tplot_name)\n",
    "                            if get_data_vars is None:\n",
    "                                store_data(current_tplot_name, delete=True)\n",
    "                            else:\n",
    "                                #;--- Rename\n",
    "                                new_tplot_name = prefix+'mag_'+suffix+'_f'\n",
    "                                store_data(current_tplot_name, newname=new_tplot_name)\n",
    "                                loaded_data.remove(current_tplot_name)\n",
    "                                loaded_data.append(new_tplot_name)\n",
    "                                #;--- Missing data -1.e+31 --> NaN\n",
    "                                clip(new_tplot_name, -1e+5, 1e+5)\n",
    "                                get_data_vars = get_data(new_tplot_name)\n",
    "                                if np.all(np.isnan(get_data_vars[1])):\n",
    "                                    ylim(new_tplot_name, 40000, 49000)\n",
    "                                else:\n",
    "                                    ylim(new_tplot_name, np.nanmin(get_data_vars[1]), np.nanmax(get_data_vars[1]))\n",
    "                                #;--- Labels\n",
    "                                options(new_tplot_name, 'legend_names', ['F'])\n",
    "                                options(new_tplot_name, 'ytitle', st.upper())\n",
    "                                options(new_tplot_name, 'ysubtitle', '[nT]')\n",
    "                    else:\n",
    "                        current_tplot_name = prefix+'f_'+dt\n",
    "                        if current_tplot_name in loaded_data:\n",
    "                            store_data(current_tplot_name, delete=True)\n",
    "                            loaded_data.remove(current_tplot_name)\n",
    "\n",
    "    return loaded_data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b60baa54",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "from pyspedas.utilities.time_double import time_double\n",
    "from pytplot import get_data, store_data, options, clip, ylim, cdf_to_tplot\n",
    "from ..load import load\n",
    "\n",
    "def gps_atec(\n",
    "    trange=['2020-01-01', '2020-01-02'],\n",
    "    site='all',\n",
    "    datatype='all',\n",
    "\tparameter='',\n",
    "    fproton=False,\n",
    "    no_update=False,\n",
    "    downloadonly=False,\n",
    "    uname=None,\n",
    "    passwd=None,\n",
    "\tsuffix='',\n",
    "    get_support_data=False,\n",
    "    varformat=None,\n",
    "    varnames=[],\n",
    "    notplot=False,\n",
    "    time_clip=False,\n",
    "    version=None,\n",
    "    ror=True\n",
    "):\n",
    "\n",
    "    #===== Set parameters (1) =====#\n",
    "    file_format = 'netcdf'\n",
    "    remote_data_dir = 'https://stdb2.isee.nagoya-u.ac.jp/GPS/shinbori/AGRID2/nc/'\n",
    "    local_path = 'isee/'\n",
    "    prefix = 'isee_'\n",
    "    file_res = 3600. * 24\n",
    "    site_list = []\n",
    "    datatype_list = ['1sec', '2sec', '02hz']\n",
    "    parameter_list = ['']\n",
    "    #==============================#\n",
    "\n",
    "    # Check input parameters\n",
    "    # site\n",
    "    if isinstance(site, str):\n",
    "        st_list = site.lower()\n",
    "        st_list = st_list.split(' ')\n",
    "    elif isinstance(site, list):\n",
    "        st_list = []\n",
    "        for i in range(len(site)):\n",
    "            st_list.append(site[i].lower())\n",
    "    if 'all' in st_list:\n",
    "        st_list = site_list\n",
    "    st_list = list(set(st_list).intersection(site_list))\n",
    "\n",
    "    # datatype\n",
    "    if isinstance(datatype, str):\n",
    "        dt_list = datatype.lower()\n",
    "        dt_list = dt_list.split(' ')\n",
    "    elif isinstance(datatype, list):\n",
    "        dt_list = []\n",
    "        for i in range(len(datatype)):\n",
    "            dt_list.append(datatype[i].lower())\n",
    "    if 'all' in dt_list:\n",
    "        dt_list = datatype_list\n",
    "    dt_list = list(set(dt_list).intersection(datatype_list))\n",
    "\n",
    "    # parameter\n",
    "    if isinstance(parameter, str):\n",
    "        pr_list = parameter.lower()\n",
    "        pr_list = pr_list.split(' ')\n",
    "    elif isinstance(parameter, list):\n",
    "        pr_list = []\n",
    "        for i in range(len(parameter)):\n",
    "            pr_list.append(parameter[i].lower())\n",
    "    if 'all' in pr_list:\n",
    "        pr_list = parameter_list\n",
    "    pr_list = list(set(pr_list).intersection(parameter_list))\n",
    "    \n",
    "    if notplot:\n",
    "        loaded_data = {}\n",
    "    else:\n",
    "        loaded_data = []\n",
    "\n",
    "    for st in st_list:\n",
    "        print(st)\t\t\n",
    "        if len(st) < 1:\n",
    "            varname_st = ''\n",
    "        else:\n",
    "            varname_st = st\n",
    "\n",
    "        for dt in dt_list:\n",
    "            print(dt)\n",
    "            if len(dt) < 1:\n",
    "                varname_st_dt = varname_st\n",
    "            else:\n",
    "                varname_st_dt = varname_st+'_'+dt\n",
    "                \n",
    "            for pr in pr_list:\n",
    "                print(pr)\n",
    "                if len(pr) < 1:\n",
    "                    varname_st_dt_pr = varname_st_dt\n",
    "                else:\n",
    "                    varname_st_dt_pr = varname_st_dt+'_'+pr\n",
    "\t\t\t\t\n",
    "                if len(varname_st_dt_pr) > 0:\n",
    "                    suffix = '_'+varname_st_dt_pr\n",
    "\n",
    "\t\t\t\t#===== Set parameters (2) =====#\n",
    "                pathformat = '%Y/%Y%m%d%h_atec.nc'\n",
    "\t\t\t\t#==============================#\n",
    "\t\t\t\n",
    "                suffix_tmp=''\t\t\t\n",
    "                loaded_data_temp = load(trange=trange, site=st, datatype=dt, parameter=pr, \\\n",
    "                    pathformat=pathformat, file_res=file_res, remote_path = remote_data_dir, \\\n",
    "                    no_update=no_update, downloadonly=downloadonly, uname=uname, passwd=passwd, \\\n",
    "                    local_path=local_path, prefix=prefix, suffix=suffix_tmp, \\\n",
    "                    get_support_data=get_support_data, varformat=varformat, varnames=varnames, \\\n",
    "                    notplot=notplot, time_clip=time_clip, version=version)\n",
    "            \n",
    "                if notplot:\n",
    "                    loaded_data.update(loaded_data_temp)\n",
    "                else:\n",
    "                    loaded_data += loaded_data_temp\n",
    "\t\t\t\t\t\n",
    "                if (len(loaded_data_temp) > 0) and ror:\n",
    "                    try:\n",
    "                        if isinstance(loaded_data_temp, list):\n",
    "                            if downloadonly:\n",
    "                                cdf_file = cdflib.CDF(loaded_data_temp[-1])\n",
    "                                gatt = cdf_file.globalattsget()\n",
    "                            else:\n",
    "                                gatt = get_data(loaded_data_temp[-1], metadata=True)['CDF']['GATT']\n",
    "                        elif isinstance(loaded_data_temp, dict):\n",
    "                            gatt = loaded_data_temp[list(loaded_data_temp.keys())[-1]]['CDF']['GATT']\n",
    "                        print('**************************************************************************')\n",
    "                        print(gatt[\"Logical_source_description\"])\n",
    "                        print('')\n",
    "                        print(f'Information about {gatt[\"Station_code\"]}')\n",
    "                        print(f'PI :{gatt[\"PI_name\"]}')\n",
    "                        print('')\n",
    "                        print(f'Affiliations: {gatt[\"PI_affiliation\"]}')\n",
    "                        print('')\n",
    "                        print('Rules of the Road for NIPR Fluxgate Magnetometer Data:')\n",
    "                        print('')\n",
    "                        print(gatt[\"TEXT\"])\n",
    "                        print(f'{gatt[\"LINK_TEXT\"]} {gatt[\"HTTP_LINK\"]}')\n",
    "                        print('**************************************************************************')\n",
    "                    except:\n",
    "                        print('printing PI info and rules of the road was failed')\n",
    "                \n",
    "                if (not downloadonly) and (not notplot):\n",
    "                    #===== Remove or Rename tplot variables, and set options =====#\n",
    "                    current_tplot_name = prefix+'epoch_'+dt\n",
    "                    if current_tplot_name in loaded_data:\n",
    "                        store_data(current_tplot_name, delete=True)\n",
    "                        loaded_data.remove(current_tplot_name)\n",
    "\n",
    "                    current_tplot_name = prefix+'time_cal_'+dt\n",
    "                    if current_tplot_name in loaded_data:\n",
    "                        store_data(current_tplot_name, delete=True)\n",
    "                        loaded_data.remove(current_tplot_name)\n",
    "\n",
    "                    current_tplot_name = prefix+'hdz_'+dt\n",
    "                    if current_tplot_name in loaded_data:\n",
    "                        get_data_vars = get_data(current_tplot_name)\n",
    "                        if get_data_vars is None:\n",
    "                            store_data(current_tplot_name, delete=True)\n",
    "                        else:\n",
    "                            #;--- Rename\n",
    "                            new_tplot_name = prefix+'mag'+suffix\n",
    "                            store_data(current_tplot_name, newname=new_tplot_name)\n",
    "                            loaded_data.remove(current_tplot_name)\n",
    "                            loaded_data.append(new_tplot_name)\n",
    "                            #;--- Missing data -1.e+31 --> NaN\n",
    "                            clip(new_tplot_name, -1e+5, 1e+5)\n",
    "                            get_data_vars = get_data(new_tplot_name)\n",
    "                            ylim(new_tplot_name, np.nanmin(get_data_vars[1]), np.nanmax(get_data_vars[1]))\n",
    "                            #;--- Labels\n",
    "                            options(new_tplot_name, 'legend_names', ['H','D','Z'])\n",
    "                            options(new_tplot_name, 'Color', ['b', 'g', 'r'])\n",
    "                            options(new_tplot_name, 'ytitle', st.upper())\n",
    "                            options(new_tplot_name, 'ysubtitle', '[nT]')\n",
    "\n",
    "                    #;----- If fproton=True is set, rename tplot variables -----;\n",
    "                    if fproton:\n",
    "                        current_tplot_name = prefix+'f_'+dt\n",
    "                        if current_tplot_name in loaded_data:\n",
    "                            get_data_vars = get_data(current_tplot_name)\n",
    "                            if get_data_vars is None:\n",
    "                                store_data(current_tplot_name, delete=True)\n",
    "                            else:\n",
    "                                #;--- Rename\n",
    "                                new_tplot_name = prefix+'mag_'+suffix+'_f'\n",
    "                                store_data(current_tplot_name, newname=new_tplot_name)\n",
    "                                loaded_data.remove(current_tplot_name)\n",
    "                                loaded_data.append(new_tplot_name)\n",
    "                                #;--- Missing data -1.e+31 --> NaN\n",
    "                                clip(new_tplot_name, -1e+5, 1e+5)\n",
    "                                get_data_vars = get_data(new_tplot_name)\n",
    "                                if np.all(np.isnan(get_data_vars[1])):\n",
    "                                    ylim(new_tplot_name, 40000, 49000)\n",
    "                                else:\n",
    "                                    ylim(new_tplot_name, np.nanmin(get_data_vars[1]), np.nanmax(get_data_vars[1]))\n",
    "                                #;--- Labels\n",
    "                                options(new_tplot_name, 'legend_names', ['F'])\n",
    "                                options(new_tplot_name, 'ytitle', st.upper())\n",
    "                                options(new_tplot_name, 'ysubtitle', '[nT]')\n",
    "                    else:\n",
    "                        current_tplot_name = prefix+'f_'+dt\n",
    "                        if current_tplot_name in loaded_data:\n",
    "                            store_data(current_tplot_name, delete=True)\n",
    "                            loaded_data.remove(current_tplot_name)\n",
    "\n",
    "    return loaded_data\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
